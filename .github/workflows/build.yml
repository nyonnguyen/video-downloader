name: Build Executable

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to main branch
  schedule:
    - cron: '0 2 * * *'  # Runs nightly at 2:00 AM UTC
  workflow_dispatch:  # Allows manual triggering
    inputs:
      build_target:
        description: 'Build target (e.g., main.py)'
        required: false
        default: 'main.py'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Create and activate virtual environment
      run: |
        python -m venv venv
        ./venv/Scripts/activate

    - name: Install dependencies
      run: |
        ./venv/Scripts/pip install --upgrade pip
        ./venv/Scripts/pip install -r requirements.txt
        ./venv/Scripts/pip install pyinstaller

    - name: Build executable
      run: |
        ./venv/Scripts/activate
        pyinstaller --onefile ${{ github.event.inputs.build_target || 'main.py' }}

    - name: Rename built file
      run: |
        mv dist/main.exe dist/video-download.exe

    - name: Upload artifact (no zip)
      uses: actions/upload-artifact@v4
      with:
        name: video-download
        path: dist/video-download.exe
        if-no-files-found: error  # Fails the job if the file is missing
        retention-days: 5         # Optional: Retain the artifact for 5 days

    - name: Determine version tag
      id: tag
      run: |
        # Auto-generate a version tag using PowerShell on Windows
        $date = Get-Date -Format "yyyy.MM.dd"
        echo "TAG_NAME=v$date" >> $env:GITHUB_ENV
        echo "Generated tag: v$date"
      shell: pwsh

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }} # Use the dynamically created tag
        release_name: Release ${{ env.TAG_NAME }}
        body: |
          ### Changes
          - Built executable for version ${{ env.TAG_NAME }}
        draft: false
        prerelease: false
      continue-on-error: true  # Skip this step if it fails

    - name: Upload to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url || '' }}
        asset_path: dist/video-download.exe
        asset_name: video-download.exe
        asset_content_type: application/octet-stream
      if: ${{ steps.create_release.outcome == 'success' }}  # Only run if release creation succeeded
      continue-on-error: true  # Skip this step if it fails
